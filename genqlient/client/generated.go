// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package client

import (
	"context"

	"github.com/Khan/genqlient/graphql"
)

// CreateTodoCreateTodo includes the requested fields of the GraphQL type Todo.
type CreateTodoCreateTodo struct {
	Id   string `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

// GetId returns CreateTodoCreateTodo.Id, and is useful for accessing the field via an interface.
func (v *CreateTodoCreateTodo) GetId() string { return v.Id }

// GetText returns CreateTodoCreateTodo.Text, and is useful for accessing the field via an interface.
func (v *CreateTodoCreateTodo) GetText() string { return v.Text }

// GetDone returns CreateTodoCreateTodo.Done, and is useful for accessing the field via an interface.
func (v *CreateTodoCreateTodo) GetDone() bool { return v.Done }

// CreateTodoResponse is returned by CreateTodo on success.
type CreateTodoResponse struct {
	CreateTodo CreateTodoCreateTodo `json:"createTodo"`
}

// GetCreateTodo returns CreateTodoResponse.CreateTodo, and is useful for accessing the field via an interface.
func (v *CreateTodoResponse) GetCreateTodo() CreateTodoCreateTodo { return v.CreateTodo }

// GetTodosResponse is returned by GetTodos on success.
type GetTodosResponse struct {
	Todos []GetTodosTodosTodo `json:"todos"`
}

// GetTodos returns GetTodosResponse.Todos, and is useful for accessing the field via an interface.
func (v *GetTodosResponse) GetTodos() []GetTodosTodosTodo { return v.Todos }

// GetTodosTodosTodo includes the requested fields of the GraphQL type Todo.
type GetTodosTodosTodo struct {
	Id   string                `json:"id"`
	Text string                `json:"text"`
	Done bool                  `json:"done"`
	User GetTodosTodosTodoUser `json:"user"`
}

// GetId returns GetTodosTodosTodo.Id, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetId() string { return v.Id }

// GetText returns GetTodosTodosTodo.Text, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetText() string { return v.Text }

// GetDone returns GetTodosTodosTodo.Done, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetDone() bool { return v.Done }

// GetUser returns GetTodosTodosTodo.User, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodo) GetUser() GetTodosTodosTodoUser { return v.User }

// GetTodosTodosTodoUser includes the requested fields of the GraphQL type User.
type GetTodosTodosTodoUser struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// GetId returns GetTodosTodosTodoUser.Id, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodoUser) GetId() string { return v.Id }

// GetName returns GetTodosTodosTodoUser.Name, and is useful for accessing the field via an interface.
func (v *GetTodosTodosTodoUser) GetName() string { return v.Name }

type NewTodo struct {
	Text   string `json:"text"`
	UserId string `json:"userId"`
}

// GetText returns NewTodo.Text, and is useful for accessing the field via an interface.
func (v *NewTodo) GetText() string { return v.Text }

// GetUserId returns NewTodo.UserId, and is useful for accessing the field via an interface.
func (v *NewTodo) GetUserId() string { return v.UserId }

// __CreateTodoInput is used internally by genqlient
type __CreateTodoInput struct {
	Input NewTodo `json:"input"`
}

// GetInput returns __CreateTodoInput.Input, and is useful for accessing the field via an interface.
func (v *__CreateTodoInput) GetInput() NewTodo { return v.Input }

func CreateTodo(
	ctx context.Context,
	client graphql.Client,
	input NewTodo,
) (*CreateTodoResponse, error) {
	req := &graphql.Request{
		OpName: "CreateTodo",
		Query: `
mutation CreateTodo ($input: NewTodo!) {
	createTodo(input: $input) {
		id
		text
		done
	}
}
`,
		Variables: &__CreateTodoInput{
			Input: input,
		},
	}
	var err error

	var data CreateTodoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func GetTodos(
	ctx context.Context,
	client graphql.Client,
) (*GetTodosResponse, error) {
	req := &graphql.Request{
		OpName: "GetTodos",
		Query: `
query GetTodos {
	todos {
		id
		text
		done
		user {
			id
			name
		}
	}
}
`,
	}
	var err error

	var data GetTodosResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
